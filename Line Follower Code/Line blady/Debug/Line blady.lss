
Line blady.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000960  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000960  000009f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080006e  0080006e  00000a02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003b0  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000226  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000253  00000000  00000000  000010a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000022f  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003bf  00000000  00000000  0000162f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000019ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 60 01 	call	0x2c0	; 0x2c0 <main>
  8a:	0c 94 ae 04 	jmp	0x95c	; 0x95c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Readsensors>:
int  delay = 10;
float control;
float s;

float Readsensors()
{
  92:	bf 92       	push	r11
  94:	cf 92       	push	r12
  96:	df 92       	push	r13
  98:	ef 92       	push	r14
  9a:	ff 92       	push	r15
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
	float avgsensor = 0.0;
	uint8_t sensor1,sensor2,sensor3;
	
	if (PINA == 0b00000110)
  a4:	89 b3       	in	r24, 0x19	; 25
  a6:	bb 24       	eor	r11, r11
  a8:	b3 94       	inc	r11
  aa:	86 30       	cpi	r24, 0x06	; 6
  ac:	09 f0       	breq	.+2      	; 0xb0 <Readsensors+0x1e>
  ae:	b1 2c       	mov	r11, r1
	else
	{
		sensor1 = 0;
	}
	
	if (PINA == 0b00000101)
  b0:	89 b3       	in	r24, 0x19	; 25
  b2:	c1 e0       	ldi	r28, 0x01	; 1
  b4:	85 30       	cpi	r24, 0x05	; 5
  b6:	09 f0       	breq	.+2      	; 0xba <Readsensors+0x28>
  b8:	c0 e0       	ldi	r28, 0x00	; 0
	else
	{
		sensor2 = 0;
	}
	
	if (PINA == 0b00000011)
  ba:	99 b3       	in	r25, 0x19	; 25
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	93 30       	cpi	r25, 0x03	; 3
  c0:	09 f0       	breq	.+2      	; 0xc4 <Readsensors+0x32>
  c2:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		sensor3 = 0;
	}

	if (sensor1 == 0 && sensor2 == 0 && sensor3 == 0)
  c4:	b1 10       	cpse	r11, r1
  c6:	05 c0       	rjmp	.+10     	; 0xd2 <Readsensors+0x40>
  c8:	c1 11       	cpse	r28, r1
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <Readsensors+0x40>
  cc:	88 23       	and	r24, r24
  ce:	09 f4       	brne	.+2      	; 0xd2 <Readsensors+0x40>
  d0:	45 c0       	rjmp	.+138    	; 0x15c <Readsensors+0xca>
	{
		return 0xFF;
	}
	
	avgsensor = (float) sensor1*1 + sensor2*2 + sensor3*3;
  d2:	d0 e0       	ldi	r29, 0x00	; 0
  d4:	08 2f       	mov	r16, r24
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	6b 2d       	mov	r22, r11
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 8a 03 	call	0x714	; 0x714 <__floatunsisf>
  e4:	6b 01       	movw	r12, r22
  e6:	7c 01       	movw	r14, r24
  e8:	ce 01       	movw	r24, r28
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	bc 01       	movw	r22, r24
  f0:	99 0f       	add	r25, r25
  f2:	88 0b       	sbc	r24, r24
  f4:	99 0b       	sbc	r25, r25
  f6:	0e 94 8c 03 	call	0x718	; 0x718 <__floatsisf>
  fa:	9b 01       	movw	r18, r22
  fc:	ac 01       	movw	r20, r24
  fe:	c7 01       	movw	r24, r14
 100:	b6 01       	movw	r22, r12
 102:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__addsf3>
 106:	6b 01       	movw	r12, r22
 108:	7c 01       	movw	r14, r24
 10a:	c8 01       	movw	r24, r16
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	80 0f       	add	r24, r16
 112:	91 1f       	adc	r25, r17
 114:	bc 01       	movw	r22, r24
 116:	99 0f       	add	r25, r25
 118:	88 0b       	sbc	r24, r24
 11a:	99 0b       	sbc	r25, r25
 11c:	0e 94 8c 03 	call	0x718	; 0x718 <__floatsisf>
 120:	9b 01       	movw	r18, r22
 122:	ac 01       	movw	r20, r24
 124:	c7 01       	movw	r24, r14
 126:	b6 01       	movw	r22, r12
 128:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__addsf3>
 12c:	6b 01       	movw	r12, r22
 12e:	7c 01       	movw	r14, r24
	avgsensor = (float) avgsensor / (sensor1 + sensor2 + sensor3);
 130:	cb 0d       	add	r28, r11
 132:	d1 1d       	adc	r29, r1
 134:	c8 01       	movw	r24, r16
 136:	8c 0f       	add	r24, r28
 138:	9d 1f       	adc	r25, r29
 13a:	bc 01       	movw	r22, r24
 13c:	99 0f       	add	r25, r25
 13e:	88 0b       	sbc	r24, r24
 140:	99 0b       	sbc	r25, r25
 142:	0e 94 8c 03 	call	0x718	; 0x718 <__floatsisf>
 146:	9b 01       	movw	r18, r22
 148:	ac 01       	movw	r20, r24
 14a:	c7 01       	movw	r24, r14
 14c:	b6 01       	movw	r22, r12
 14e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__divsf3>
	
	return avgsensor;
 152:	56 2f       	mov	r21, r22
 154:	47 2f       	mov	r20, r23
 156:	38 2f       	mov	r19, r24
 158:	29 2f       	mov	r18, r25
 15a:	04 c0       	rjmp	.+8      	; 0x164 <Readsensors+0xd2>
		sensor3 = 0;
	}

	if (sensor1 == 0 && sensor2 == 0 && sensor3 == 0)
	{
		return 0xFF;
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	3f e7       	ldi	r19, 0x7F	; 127
 162:	23 e4       	ldi	r18, 0x43	; 67
	
	avgsensor = (float) sensor1*1 + sensor2*2 + sensor3*3;
	avgsensor = (float) avgsensor / (sensor1 + sensor2 + sensor3);
	
	return avgsensor;
}
 164:	65 2f       	mov	r22, r21
 166:	74 2f       	mov	r23, r20
 168:	83 2f       	mov	r24, r19
 16a:	92 2f       	mov	r25, r18
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	ff 90       	pop	r15
 176:	ef 90       	pop	r14
 178:	df 90       	pop	r13
 17a:	cf 90       	pop	r12
 17c:	bf 90       	pop	r11
 17e:	08 95       	ret

00000180 <PID>:

float PID(float cur_value , float req_value)
{
 180:	4f 92       	push	r4
 182:	5f 92       	push	r5
 184:	6f 92       	push	r6
 186:	7f 92       	push	r7
 188:	8f 92       	push	r8
 18a:	9f 92       	push	r9
 18c:	af 92       	push	r10
 18e:	bf 92       	push	r11
 190:	cf 92       	push	r12
 192:	df 92       	push	r13
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	00 d0       	rcall	.+0      	; 0x19e <PID+0x1e>
 19e:	00 d0       	rcall	.+0      	; 0x1a0 <PID+0x20>
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
	float pid,error;
	
	error = cur_value - req_value;
 1a4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__subsf3>
 1a8:	6b 01       	movw	r12, r22
 1aa:	7c 01       	movw	r14, r24
	eInteg += error;
 1ac:	60 91 72 00 	lds	r22, 0x0072
 1b0:	70 91 73 00 	lds	r23, 0x0073
 1b4:	80 91 74 00 	lds	r24, 0x0074
 1b8:	90 91 75 00 	lds	r25, 0x0075
 1bc:	0e 94 8c 03 	call	0x718	; 0x718 <__floatsisf>
 1c0:	a7 01       	movw	r20, r14
 1c2:	96 01       	movw	r18, r12
 1c4:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__addsf3>
 1c8:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__fixsfsi>
 1cc:	2b 01       	movw	r4, r22
 1ce:	3c 01       	movw	r6, r24
 1d0:	60 93 72 00 	sts	0x0072, r22
 1d4:	70 93 73 00 	sts	0x0073, r23
 1d8:	80 93 74 00 	sts	0x0074, r24
 1dc:	90 93 75 00 	sts	0x0075, r25
	eprev = error;
 1e0:	c7 01       	movw	r24, r14
 1e2:	b6 01       	movw	r22, r12
 1e4:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__fixsfsi>
 1e8:	4b 01       	movw	r8, r22
 1ea:	5c 01       	movw	r10, r24
 1ec:	60 93 6e 00 	sts	0x006E, r22
 1f0:	70 93 6f 00 	sts	0x006F, r23
 1f4:	80 93 70 00 	sts	0x0070, r24
 1f8:	90 93 71 00 	sts	0x0071, r25
	pid = (pGain * error) + (iGain * eInteg) + (dGain * (error - eprev));
 1fc:	20 91 6a 00 	lds	r18, 0x006A
 200:	30 91 6b 00 	lds	r19, 0x006B
 204:	40 91 6c 00 	lds	r20, 0x006C
 208:	50 91 6d 00 	lds	r21, 0x006D
 20c:	c7 01       	movw	r24, r14
 20e:	b6 01       	movw	r22, r12
 210:	0e 94 41 04 	call	0x882	; 0x882 <__mulsf3>
 214:	69 83       	std	Y+1, r22	; 0x01
 216:	7a 83       	std	Y+2, r23	; 0x02
 218:	8b 83       	std	Y+3, r24	; 0x03
 21a:	9c 83       	std	Y+4, r25	; 0x04
 21c:	c3 01       	movw	r24, r6
 21e:	b2 01       	movw	r22, r4
 220:	0e 94 8c 03 	call	0x718	; 0x718 <__floatsisf>
 224:	20 91 66 00 	lds	r18, 0x0066
 228:	30 91 67 00 	lds	r19, 0x0067
 22c:	40 91 68 00 	lds	r20, 0x0068
 230:	50 91 69 00 	lds	r21, 0x0069
 234:	0e 94 41 04 	call	0x882	; 0x882 <__mulsf3>
 238:	9b 01       	movw	r18, r22
 23a:	ac 01       	movw	r20, r24
 23c:	69 81       	ldd	r22, Y+1	; 0x01
 23e:	7a 81       	ldd	r23, Y+2	; 0x02
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	9c 81       	ldd	r25, Y+4	; 0x04
 244:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__addsf3>
 248:	2b 01       	movw	r4, r22
 24a:	3c 01       	movw	r6, r24
 24c:	c5 01       	movw	r24, r10
 24e:	b4 01       	movw	r22, r8
 250:	0e 94 8c 03 	call	0x718	; 0x718 <__floatsisf>
 254:	9b 01       	movw	r18, r22
 256:	ac 01       	movw	r20, r24
 258:	c7 01       	movw	r24, r14
 25a:	b6 01       	movw	r22, r12
 25c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__subsf3>
 260:	20 91 62 00 	lds	r18, 0x0062
 264:	30 91 63 00 	lds	r19, 0x0063
 268:	40 91 64 00 	lds	r20, 0x0064
 26c:	50 91 65 00 	lds	r21, 0x0065
 270:	0e 94 41 04 	call	0x882	; 0x882 <__mulsf3>
 274:	9b 01       	movw	r18, r22
 276:	ac 01       	movw	r20, r24
 278:	c3 01       	movw	r24, r6
 27a:	b2 01       	movw	r22, r4
 27c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__addsf3>
	
	
	return pid;
}
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	ff 90       	pop	r15
 28e:	ef 90       	pop	r14
 290:	df 90       	pop	r13
 292:	cf 90       	pop	r12
 294:	bf 90       	pop	r11
 296:	af 90       	pop	r10
 298:	9f 90       	pop	r9
 29a:	8f 90       	pop	r8
 29c:	7f 90       	pop	r7
 29e:	6f 90       	pop	r6
 2a0:	5f 90       	pop	r5
 2a2:	4f 90       	pop	r4
 2a4:	08 95       	ret

000002a6 <DelayMs>:

void DelayMs(uint8_t ms)
{
	uint8_t i;
	for (i=0;i<ms;i++)
 2a6:	88 23       	and	r24, r24
 2a8:	51 f0       	breq	.+20     	; 0x2be <DelayMs+0x18>
 2aa:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	ef e9       	ldi	r30, 0x9F	; 159
 2ae:	ff e0       	ldi	r31, 0x0F	; 15
 2b0:	31 97       	sbiw	r30, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <DelayMs+0xa>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <DelayMs+0x10>
 2b6:	00 00       	nop
 2b8:	9f 5f       	subi	r25, 0xFF	; 255
 2ba:	98 13       	cpse	r25, r24
 2bc:	f7 cf       	rjmp	.-18     	; 0x2ac <DelayMs+0x6>
 2be:	08 95       	ret

000002c0 <main>:
	}
}

int main(void)
{
	pwm_init();
 2c0:	0e 94 65 02 	call	0x4ca	; 0x4ca <pwm_init>
	DDRA = 0xf8;
 2c4:	88 ef       	ldi	r24, 0xF8	; 248
 2c6:	8a bb       	out	0x1a, r24	; 26
	float sprev=0;
 2c8:	41 2c       	mov	r4, r1
 2ca:	51 2c       	mov	r5, r1
 2cc:	32 01       	movw	r6, r4
			
			if (control <= 0.0)
			{
				if (control < -100)
				{
					PORTC = 0b00010010;
 2ce:	0f 2e       	mov	r0, r31
 2d0:	f2 e1       	ldi	r31, 0x12	; 18
 2d2:	af 2e       	mov	r10, r31
 2d4:	f0 2d       	mov	r31, r0
					OCR0 = -(control + 100);
					OCR2 = 100;
 2d6:	14 e6       	ldi	r17, 0x64	; 100
				}
				else
				{
					PORTC = 0b00010001;
 2d8:	01 e1       	ldi	r16, 0x11	; 17
			
			if (control > 0.0)
			{
				if (control > 100)
				{
					PORTC = 0b00100001;
 2da:	0f 2e       	mov	r0, r31
 2dc:	f1 e2       	ldi	r31, 0x21	; 33
 2de:	bf 2e       	mov	r11, r31
 2e0:	f0 2d       	mov	r31, r0
					OCR2 = 100;
				}
				
			}
			
			DelayMs(delay);
 2e2:	c0 e6       	ldi	r28, 0x60	; 96
 2e4:	d0 e0       	ldi	r29, 0x00	; 0
	DDRA = 0xf8;
	float sprev=0;
	
	while (1) 
    {		
			s = Readsensors();
 2e6:	0e 94 49 00 	call	0x92	; 0x92 <Readsensors>
 2ea:	6b 01       	movw	r12, r22
 2ec:	7c 01       	movw	r14, r24
			
			if (s == 0xFF)
 2ee:	20 e0       	ldi	r18, 0x00	; 0
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	4f e7       	ldi	r20, 0x7F	; 127
 2f4:	53 e4       	ldi	r21, 0x43	; 67
 2f6:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__cmpsf2>
 2fa:	88 23       	and	r24, r24
 2fc:	49 f0       	breq	.+18     	; 0x310 <main+0x50>
	DDRA = 0xf8;
	float sprev=0;
	
	while (1) 
    {		
			s = Readsensors();
 2fe:	c0 92 7a 00 	sts	0x007A, r12
 302:	d0 92 7b 00 	sts	0x007B, r13
 306:	e0 92 7c 00 	sts	0x007C, r14
 30a:	f0 92 7d 00 	sts	0x007D, r15
 30e:	08 c0       	rjmp	.+16     	; 0x320 <main+0x60>
			
			if (s == 0xFF)
			{
				s = sprev;
 310:	40 92 7a 00 	sts	0x007A, r4
 314:	50 92 7b 00 	sts	0x007B, r5
 318:	60 92 7c 00 	sts	0x007C, r6
 31c:	70 92 7d 00 	sts	0x007D, r7
			}
			
			control = PID(s , 2.0);
 320:	60 91 7a 00 	lds	r22, 0x007A
 324:	70 91 7b 00 	lds	r23, 0x007B
 328:	80 91 7c 00 	lds	r24, 0x007C
 32c:	90 91 7d 00 	lds	r25, 0x007D
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	50 e4       	ldi	r21, 0x40	; 64
 338:	0e 94 c0 00 	call	0x180	; 0x180 <PID>
 33c:	6b 01       	movw	r12, r22
 33e:	7c 01       	movw	r14, r24
 340:	60 93 76 00 	sts	0x0076, r22
 344:	70 93 77 00 	sts	0x0077, r23
 348:	80 93 78 00 	sts	0x0078, r24
 34c:	90 93 79 00 	sts	0x0079, r25
			
			if (control > 200)
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	48 e4       	ldi	r20, 0x48	; 72
 356:	53 e4       	ldi	r21, 0x43	; 67
 358:	0e 94 3c 04 	call	0x878	; 0x878 <__gesf2>
 35c:	18 16       	cp	r1, r24
 35e:	6c f4       	brge	.+26     	; 0x37a <main+0xba>
			{
				control = 200;
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	a8 e4       	ldi	r26, 0x48	; 72
 366:	b3 e4       	ldi	r27, 0x43	; 67
 368:	80 93 76 00 	sts	0x0076, r24
 36c:	90 93 77 00 	sts	0x0077, r25
 370:	a0 93 78 00 	sts	0x0078, r26
 374:	b0 93 79 00 	sts	0x0079, r27
 378:	32 c0       	rjmp	.+100    	; 0x3de <main+0x11e>
			}
			
			if (control < -200)
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	48 e4       	ldi	r20, 0x48	; 72
 380:	53 ec       	ldi	r21, 0xC3	; 195
 382:	c7 01       	movw	r24, r14
 384:	b6 01       	movw	r22, r12
 386:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__cmpsf2>
 38a:	88 23       	and	r24, r24
 38c:	6c f4       	brge	.+26     	; 0x3a8 <main+0xe8>
			{
				control = -200;
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	a8 e4       	ldi	r26, 0x48	; 72
 394:	b3 ec       	ldi	r27, 0xC3	; 195
 396:	80 93 76 00 	sts	0x0076, r24
 39a:	90 93 77 00 	sts	0x0077, r25
 39e:	a0 93 78 00 	sts	0x0078, r26
 3a2:	b0 93 79 00 	sts	0x0079, r27
 3a6:	5d c0       	rjmp	.+186    	; 0x462 <main+0x1a2>
			}
			
			if (control > 0.0)
 3a8:	c0 90 76 00 	lds	r12, 0x0076
 3ac:	d0 90 77 00 	lds	r13, 0x0077
 3b0:	e0 90 78 00 	lds	r14, 0x0078
 3b4:	f0 90 79 00 	lds	r15, 0x0079
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	a9 01       	movw	r20, r18
 3be:	c7 01       	movw	r24, r14
 3c0:	b6 01       	movw	r22, r12
 3c2:	0e 94 3c 04 	call	0x878	; 0x878 <__gesf2>
 3c6:	18 16       	cp	r1, r24
 3c8:	8c f5       	brge	.+98     	; 0x42c <main+0x16c>
			{
				if (control > 100)
 3ca:	20 e0       	ldi	r18, 0x00	; 0
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	48 ec       	ldi	r20, 0xC8	; 200
 3d0:	52 e4       	ldi	r21, 0x42	; 66
 3d2:	c7 01       	movw	r24, r14
 3d4:	b6 01       	movw	r22, r12
 3d6:	0e 94 3c 04 	call	0x878	; 0x878 <__gesf2>
 3da:	18 16       	cp	r1, r24
 3dc:	a4 f4       	brge	.+40     	; 0x406 <main+0x146>
				{
					PORTC = 0b00100001;
 3de:	b5 ba       	out	0x15, r11	; 21
					OCR2 = control - 100;
 3e0:	20 e0       	ldi	r18, 0x00	; 0
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	48 ec       	ldi	r20, 0xC8	; 200
 3e6:	52 e4       	ldi	r21, 0x42	; 66
 3e8:	60 91 76 00 	lds	r22, 0x0076
 3ec:	70 91 77 00 	lds	r23, 0x0077
 3f0:	80 91 78 00 	lds	r24, 0x0078
 3f4:	90 91 79 00 	lds	r25, 0x0079
 3f8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__subsf3>
 3fc:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fixunssfsi>
 400:	63 bd       	out	0x23, r22	; 35
					OCR0 = 100;
 402:	1c bf       	out	0x3c, r17	; 60
 404:	13 c0       	rjmp	.+38     	; 0x42c <main+0x16c>
				}
				else
				{
					PORTC = 0b00010001;
 406:	05 bb       	out	0x15, r16	; 21
					OCR2 = 100 - control;
 408:	20 91 76 00 	lds	r18, 0x0076
 40c:	30 91 77 00 	lds	r19, 0x0077
 410:	40 91 78 00 	lds	r20, 0x0078
 414:	50 91 79 00 	lds	r21, 0x0079
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	88 ec       	ldi	r24, 0xC8	; 200
 41e:	92 e4       	ldi	r25, 0x42	; 66
 420:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__subsf3>
 424:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fixunssfsi>
 428:	63 bd       	out	0x23, r22	; 35
					OCR0 = 100;
 42a:	1c bf       	out	0x3c, r17	; 60
				}
			}
			
			if (control <= 0.0)
 42c:	c0 90 76 00 	lds	r12, 0x0076
 430:	d0 90 77 00 	lds	r13, 0x0077
 434:	e0 90 78 00 	lds	r14, 0x0078
 438:	f0 90 79 00 	lds	r15, 0x0079
 43c:	20 e0       	ldi	r18, 0x00	; 0
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	a9 01       	movw	r20, r18
 442:	c7 01       	movw	r24, r14
 444:	b6 01       	movw	r22, r12
 446:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__cmpsf2>
 44a:	18 16       	cp	r1, r24
 44c:	94 f1       	brlt	.+100    	; 0x4b2 <main+0x1f2>
			{
				if (control < -100)
 44e:	20 e0       	ldi	r18, 0x00	; 0
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	48 ec       	ldi	r20, 0xC8	; 200
 454:	52 ec       	ldi	r21, 0xC2	; 194
 456:	c7 01       	movw	r24, r14
 458:	b6 01       	movw	r22, r12
 45a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__cmpsf2>
 45e:	88 23       	and	r24, r24
 460:	ac f4       	brge	.+42     	; 0x48c <main+0x1cc>
				{
					PORTC = 0b00010010;
 462:	a5 ba       	out	0x15, r10	; 21
					OCR0 = -(control + 100);
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	48 ec       	ldi	r20, 0xC8	; 200
 46a:	52 e4       	ldi	r21, 0x42	; 66
 46c:	60 91 76 00 	lds	r22, 0x0076
 470:	70 91 77 00 	lds	r23, 0x0077
 474:	80 91 78 00 	lds	r24, 0x0078
 478:	90 91 79 00 	lds	r25, 0x0079
 47c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__addsf3>
 480:	90 58       	subi	r25, 0x80	; 128
 482:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fixunssfsi>
 486:	6c bf       	out	0x3c, r22	; 60
					OCR2 = 100;
 488:	13 bd       	out	0x23, r17	; 35
 48a:	13 c0       	rjmp	.+38     	; 0x4b2 <main+0x1f2>
				}
				else
				{
					PORTC = 0b00010001;
 48c:	05 bb       	out	0x15, r16	; 21
					OCR0 = 100 + control;
 48e:	20 e0       	ldi	r18, 0x00	; 0
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	48 ec       	ldi	r20, 0xC8	; 200
 494:	52 e4       	ldi	r21, 0x42	; 66
 496:	60 91 76 00 	lds	r22, 0x0076
 49a:	70 91 77 00 	lds	r23, 0x0077
 49e:	80 91 78 00 	lds	r24, 0x0078
 4a2:	90 91 79 00 	lds	r25, 0x0079
 4a6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__addsf3>
 4aa:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fixunssfsi>
 4ae:	6c bf       	out	0x3c, r22	; 60
					OCR2 = 100;
 4b0:	13 bd       	out	0x23, r17	; 35
				}
				
			}
			
			DelayMs(delay);
 4b2:	88 81       	ld	r24, Y
 4b4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DelayMs>
			sprev = s;
 4b8:	40 90 7a 00 	lds	r4, 0x007A
 4bc:	50 90 7b 00 	lds	r5, 0x007B
 4c0:	60 90 7c 00 	lds	r6, 0x007C
 4c4:	70 90 7d 00 	lds	r7, 0x007D
			OCR2 = 100;
			
		}*/
	  ////////////////////////////////////////////////////////////
	  
	}
 4c8:	0e cf       	rjmp	.-484    	; 0x2e6 <main+0x26>

000004ca <pwm_init>:
#include "Inc.h"

void pwm_init()
{
	
	TCCR0|= (1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS02);    //Mode = Fast PWM & PWM Output  = Non Inverted  & Fc = 16M/64 = 250k
 4ca:	83 b7       	in	r24, 0x33	; 51
 4cc:	8c 66       	ori	r24, 0x6C	; 108
 4ce:	83 bf       	out	0x33, r24	; 51
	TCCR2|= (1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS22)|(1<<CS21);    //Mode = Fast PWM & PWM Output  = Non Inverted & Fc = 16M/64 = 250k
 4d0:	85 b5       	in	r24, 0x25	; 37
 4d2:	8e 66       	ori	r24, 0x6E	; 110
 4d4:	85 bd       	out	0x25, r24	; 37
	DDRC = 0xff;
 4d6:	8f ef       	ldi	r24, 0xFF	; 255
 4d8:	84 bb       	out	0x14, r24	; 20
	DDRD |= (1<<PD7);	 // OCR2 output
 4da:	8f 9a       	sbi	0x11, 7	; 17
	DDRB |= (1<<PB3);    // OCR0 output
 4dc:	bb 9a       	sbi	0x17, 3	; 23
 4de:	08 95       	ret

000004e0 <__subsf3>:
 4e0:	50 58       	subi	r21, 0x80	; 128

000004e2 <__addsf3>:
 4e2:	bb 27       	eor	r27, r27
 4e4:	aa 27       	eor	r26, r26
 4e6:	0e 94 88 02 	call	0x510	; 0x510 <__addsf3x>
 4ea:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_round>
 4ee:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__fp_pscA>
 4f2:	38 f0       	brcs	.+14     	; 0x502 <__addsf3+0x20>
 4f4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_pscB>
 4f8:	20 f0       	brcs	.+8      	; 0x502 <__addsf3+0x20>
 4fa:	39 f4       	brne	.+14     	; 0x50a <__addsf3+0x28>
 4fc:	9f 3f       	cpi	r25, 0xFF	; 255
 4fe:	19 f4       	brne	.+6      	; 0x506 <__addsf3+0x24>
 500:	26 f4       	brtc	.+8      	; 0x50a <__addsf3+0x28>
 502:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__fp_nan>
 506:	0e f4       	brtc	.+2      	; 0x50a <__addsf3+0x28>
 508:	e0 95       	com	r30
 50a:	e7 fb       	bst	r30, 7
 50c:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_inf>

00000510 <__addsf3x>:
 510:	e9 2f       	mov	r30, r25
 512:	0e 94 13 04 	call	0x826	; 0x826 <__fp_split3>
 516:	58 f3       	brcs	.-42     	; 0x4ee <__addsf3+0xc>
 518:	ba 17       	cp	r27, r26
 51a:	62 07       	cpc	r22, r18
 51c:	73 07       	cpc	r23, r19
 51e:	84 07       	cpc	r24, r20
 520:	95 07       	cpc	r25, r21
 522:	20 f0       	brcs	.+8      	; 0x52c <__addsf3x+0x1c>
 524:	79 f4       	brne	.+30     	; 0x544 <__addsf3x+0x34>
 526:	a6 f5       	brtc	.+104    	; 0x590 <__addsf3x+0x80>
 528:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_zero>
 52c:	0e f4       	brtc	.+2      	; 0x530 <__addsf3x+0x20>
 52e:	e0 95       	com	r30
 530:	0b 2e       	mov	r0, r27
 532:	ba 2f       	mov	r27, r26
 534:	a0 2d       	mov	r26, r0
 536:	0b 01       	movw	r0, r22
 538:	b9 01       	movw	r22, r18
 53a:	90 01       	movw	r18, r0
 53c:	0c 01       	movw	r0, r24
 53e:	ca 01       	movw	r24, r20
 540:	a0 01       	movw	r20, r0
 542:	11 24       	eor	r1, r1
 544:	ff 27       	eor	r31, r31
 546:	59 1b       	sub	r21, r25
 548:	99 f0       	breq	.+38     	; 0x570 <__addsf3x+0x60>
 54a:	59 3f       	cpi	r21, 0xF9	; 249
 54c:	50 f4       	brcc	.+20     	; 0x562 <__addsf3x+0x52>
 54e:	50 3e       	cpi	r21, 0xE0	; 224
 550:	68 f1       	brcs	.+90     	; 0x5ac <__addsf3x+0x9c>
 552:	1a 16       	cp	r1, r26
 554:	f0 40       	sbci	r31, 0x00	; 0
 556:	a2 2f       	mov	r26, r18
 558:	23 2f       	mov	r18, r19
 55a:	34 2f       	mov	r19, r20
 55c:	44 27       	eor	r20, r20
 55e:	58 5f       	subi	r21, 0xF8	; 248
 560:	f3 cf       	rjmp	.-26     	; 0x548 <__addsf3x+0x38>
 562:	46 95       	lsr	r20
 564:	37 95       	ror	r19
 566:	27 95       	ror	r18
 568:	a7 95       	ror	r26
 56a:	f0 40       	sbci	r31, 0x00	; 0
 56c:	53 95       	inc	r21
 56e:	c9 f7       	brne	.-14     	; 0x562 <__addsf3x+0x52>
 570:	7e f4       	brtc	.+30     	; 0x590 <__addsf3x+0x80>
 572:	1f 16       	cp	r1, r31
 574:	ba 0b       	sbc	r27, r26
 576:	62 0b       	sbc	r22, r18
 578:	73 0b       	sbc	r23, r19
 57a:	84 0b       	sbc	r24, r20
 57c:	ba f0       	brmi	.+46     	; 0x5ac <__addsf3x+0x9c>
 57e:	91 50       	subi	r25, 0x01	; 1
 580:	a1 f0       	breq	.+40     	; 0x5aa <__addsf3x+0x9a>
 582:	ff 0f       	add	r31, r31
 584:	bb 1f       	adc	r27, r27
 586:	66 1f       	adc	r22, r22
 588:	77 1f       	adc	r23, r23
 58a:	88 1f       	adc	r24, r24
 58c:	c2 f7       	brpl	.-16     	; 0x57e <__addsf3x+0x6e>
 58e:	0e c0       	rjmp	.+28     	; 0x5ac <__addsf3x+0x9c>
 590:	ba 0f       	add	r27, r26
 592:	62 1f       	adc	r22, r18
 594:	73 1f       	adc	r23, r19
 596:	84 1f       	adc	r24, r20
 598:	48 f4       	brcc	.+18     	; 0x5ac <__addsf3x+0x9c>
 59a:	87 95       	ror	r24
 59c:	77 95       	ror	r23
 59e:	67 95       	ror	r22
 5a0:	b7 95       	ror	r27
 5a2:	f7 95       	ror	r31
 5a4:	9e 3f       	cpi	r25, 0xFE	; 254
 5a6:	08 f0       	brcs	.+2      	; 0x5aa <__addsf3x+0x9a>
 5a8:	b0 cf       	rjmp	.-160    	; 0x50a <__addsf3+0x28>
 5aa:	93 95       	inc	r25
 5ac:	88 0f       	add	r24, r24
 5ae:	08 f0       	brcs	.+2      	; 0x5b2 <__addsf3x+0xa2>
 5b0:	99 27       	eor	r25, r25
 5b2:	ee 0f       	add	r30, r30
 5b4:	97 95       	ror	r25
 5b6:	87 95       	ror	r24
 5b8:	08 95       	ret

000005ba <__cmpsf2>:
 5ba:	0e 94 c7 03 	call	0x78e	; 0x78e <__fp_cmp>
 5be:	08 f4       	brcc	.+2      	; 0x5c2 <__cmpsf2+0x8>
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	08 95       	ret

000005c4 <__divsf3>:
 5c4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__divsf3x>
 5c8:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_round>
 5cc:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_pscB>
 5d0:	58 f0       	brcs	.+22     	; 0x5e8 <__divsf3+0x24>
 5d2:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__fp_pscA>
 5d6:	40 f0       	brcs	.+16     	; 0x5e8 <__divsf3+0x24>
 5d8:	29 f4       	brne	.+10     	; 0x5e4 <__divsf3+0x20>
 5da:	5f 3f       	cpi	r21, 0xFF	; 255
 5dc:	29 f0       	breq	.+10     	; 0x5e8 <__divsf3+0x24>
 5de:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_inf>
 5e2:	51 11       	cpse	r21, r1
 5e4:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_szero>
 5e8:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__fp_nan>

000005ec <__divsf3x>:
 5ec:	0e 94 13 04 	call	0x826	; 0x826 <__fp_split3>
 5f0:	68 f3       	brcs	.-38     	; 0x5cc <__divsf3+0x8>

000005f2 <__divsf3_pse>:
 5f2:	99 23       	and	r25, r25
 5f4:	b1 f3       	breq	.-20     	; 0x5e2 <__divsf3+0x1e>
 5f6:	55 23       	and	r21, r21
 5f8:	91 f3       	breq	.-28     	; 0x5de <__divsf3+0x1a>
 5fa:	95 1b       	sub	r25, r21
 5fc:	55 0b       	sbc	r21, r21
 5fe:	bb 27       	eor	r27, r27
 600:	aa 27       	eor	r26, r26
 602:	62 17       	cp	r22, r18
 604:	73 07       	cpc	r23, r19
 606:	84 07       	cpc	r24, r20
 608:	38 f0       	brcs	.+14     	; 0x618 <__divsf3_pse+0x26>
 60a:	9f 5f       	subi	r25, 0xFF	; 255
 60c:	5f 4f       	sbci	r21, 0xFF	; 255
 60e:	22 0f       	add	r18, r18
 610:	33 1f       	adc	r19, r19
 612:	44 1f       	adc	r20, r20
 614:	aa 1f       	adc	r26, r26
 616:	a9 f3       	breq	.-22     	; 0x602 <__divsf3_pse+0x10>
 618:	35 d0       	rcall	.+106    	; 0x684 <__divsf3_pse+0x92>
 61a:	0e 2e       	mov	r0, r30
 61c:	3a f0       	brmi	.+14     	; 0x62c <__divsf3_pse+0x3a>
 61e:	e0 e8       	ldi	r30, 0x80	; 128
 620:	32 d0       	rcall	.+100    	; 0x686 <__divsf3_pse+0x94>
 622:	91 50       	subi	r25, 0x01	; 1
 624:	50 40       	sbci	r21, 0x00	; 0
 626:	e6 95       	lsr	r30
 628:	00 1c       	adc	r0, r0
 62a:	ca f7       	brpl	.-14     	; 0x61e <__divsf3_pse+0x2c>
 62c:	2b d0       	rcall	.+86     	; 0x684 <__divsf3_pse+0x92>
 62e:	fe 2f       	mov	r31, r30
 630:	29 d0       	rcall	.+82     	; 0x684 <__divsf3_pse+0x92>
 632:	66 0f       	add	r22, r22
 634:	77 1f       	adc	r23, r23
 636:	88 1f       	adc	r24, r24
 638:	bb 1f       	adc	r27, r27
 63a:	26 17       	cp	r18, r22
 63c:	37 07       	cpc	r19, r23
 63e:	48 07       	cpc	r20, r24
 640:	ab 07       	cpc	r26, r27
 642:	b0 e8       	ldi	r27, 0x80	; 128
 644:	09 f0       	breq	.+2      	; 0x648 <__divsf3_pse+0x56>
 646:	bb 0b       	sbc	r27, r27
 648:	80 2d       	mov	r24, r0
 64a:	bf 01       	movw	r22, r30
 64c:	ff 27       	eor	r31, r31
 64e:	93 58       	subi	r25, 0x83	; 131
 650:	5f 4f       	sbci	r21, 0xFF	; 255
 652:	3a f0       	brmi	.+14     	; 0x662 <__divsf3_pse+0x70>
 654:	9e 3f       	cpi	r25, 0xFE	; 254
 656:	51 05       	cpc	r21, r1
 658:	78 f0       	brcs	.+30     	; 0x678 <__divsf3_pse+0x86>
 65a:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_inf>
 65e:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_szero>
 662:	5f 3f       	cpi	r21, 0xFF	; 255
 664:	e4 f3       	brlt	.-8      	; 0x65e <__divsf3_pse+0x6c>
 666:	98 3e       	cpi	r25, 0xE8	; 232
 668:	d4 f3       	brlt	.-12     	; 0x65e <__divsf3_pse+0x6c>
 66a:	86 95       	lsr	r24
 66c:	77 95       	ror	r23
 66e:	67 95       	ror	r22
 670:	b7 95       	ror	r27
 672:	f7 95       	ror	r31
 674:	9f 5f       	subi	r25, 0xFF	; 255
 676:	c9 f7       	brne	.-14     	; 0x66a <__divsf3_pse+0x78>
 678:	88 0f       	add	r24, r24
 67a:	91 1d       	adc	r25, r1
 67c:	96 95       	lsr	r25
 67e:	87 95       	ror	r24
 680:	97 f9       	bld	r25, 7
 682:	08 95       	ret
 684:	e1 e0       	ldi	r30, 0x01	; 1
 686:	66 0f       	add	r22, r22
 688:	77 1f       	adc	r23, r23
 68a:	88 1f       	adc	r24, r24
 68c:	bb 1f       	adc	r27, r27
 68e:	62 17       	cp	r22, r18
 690:	73 07       	cpc	r23, r19
 692:	84 07       	cpc	r24, r20
 694:	ba 07       	cpc	r27, r26
 696:	20 f0       	brcs	.+8      	; 0x6a0 <__divsf3_pse+0xae>
 698:	62 1b       	sub	r22, r18
 69a:	73 0b       	sbc	r23, r19
 69c:	84 0b       	sbc	r24, r20
 69e:	ba 0b       	sbc	r27, r26
 6a0:	ee 1f       	adc	r30, r30
 6a2:	88 f7       	brcc	.-30     	; 0x686 <__divsf3_pse+0x94>
 6a4:	e0 95       	com	r30
 6a6:	08 95       	ret

000006a8 <__fixsfsi>:
 6a8:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fixunssfsi>
 6ac:	68 94       	set
 6ae:	b1 11       	cpse	r27, r1
 6b0:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_szero>
 6b4:	08 95       	ret

000006b6 <__fixunssfsi>:
 6b6:	0e 94 1b 04 	call	0x836	; 0x836 <__fp_splitA>
 6ba:	88 f0       	brcs	.+34     	; 0x6de <__fixunssfsi+0x28>
 6bc:	9f 57       	subi	r25, 0x7F	; 127
 6be:	98 f0       	brcs	.+38     	; 0x6e6 <__fixunssfsi+0x30>
 6c0:	b9 2f       	mov	r27, r25
 6c2:	99 27       	eor	r25, r25
 6c4:	b7 51       	subi	r27, 0x17	; 23
 6c6:	b0 f0       	brcs	.+44     	; 0x6f4 <__fixunssfsi+0x3e>
 6c8:	e1 f0       	breq	.+56     	; 0x702 <__fixunssfsi+0x4c>
 6ca:	66 0f       	add	r22, r22
 6cc:	77 1f       	adc	r23, r23
 6ce:	88 1f       	adc	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	1a f0       	brmi	.+6      	; 0x6da <__fixunssfsi+0x24>
 6d4:	ba 95       	dec	r27
 6d6:	c9 f7       	brne	.-14     	; 0x6ca <__fixunssfsi+0x14>
 6d8:	14 c0       	rjmp	.+40     	; 0x702 <__fixunssfsi+0x4c>
 6da:	b1 30       	cpi	r27, 0x01	; 1
 6dc:	91 f0       	breq	.+36     	; 0x702 <__fixunssfsi+0x4c>
 6de:	0e 94 35 04 	call	0x86a	; 0x86a <__fp_zero>
 6e2:	b1 e0       	ldi	r27, 0x01	; 1
 6e4:	08 95       	ret
 6e6:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_zero>
 6ea:	67 2f       	mov	r22, r23
 6ec:	78 2f       	mov	r23, r24
 6ee:	88 27       	eor	r24, r24
 6f0:	b8 5f       	subi	r27, 0xF8	; 248
 6f2:	39 f0       	breq	.+14     	; 0x702 <__fixunssfsi+0x4c>
 6f4:	b9 3f       	cpi	r27, 0xF9	; 249
 6f6:	cc f3       	brlt	.-14     	; 0x6ea <__fixunssfsi+0x34>
 6f8:	86 95       	lsr	r24
 6fa:	77 95       	ror	r23
 6fc:	67 95       	ror	r22
 6fe:	b3 95       	inc	r27
 700:	d9 f7       	brne	.-10     	; 0x6f8 <__fixunssfsi+0x42>
 702:	3e f4       	brtc	.+14     	; 0x712 <__fixunssfsi+0x5c>
 704:	90 95       	com	r25
 706:	80 95       	com	r24
 708:	70 95       	com	r23
 70a:	61 95       	neg	r22
 70c:	7f 4f       	sbci	r23, 0xFF	; 255
 70e:	8f 4f       	sbci	r24, 0xFF	; 255
 710:	9f 4f       	sbci	r25, 0xFF	; 255
 712:	08 95       	ret

00000714 <__floatunsisf>:
 714:	e8 94       	clt
 716:	09 c0       	rjmp	.+18     	; 0x72a <__floatsisf+0x12>

00000718 <__floatsisf>:
 718:	97 fb       	bst	r25, 7
 71a:	3e f4       	brtc	.+14     	; 0x72a <__floatsisf+0x12>
 71c:	90 95       	com	r25
 71e:	80 95       	com	r24
 720:	70 95       	com	r23
 722:	61 95       	neg	r22
 724:	7f 4f       	sbci	r23, 0xFF	; 255
 726:	8f 4f       	sbci	r24, 0xFF	; 255
 728:	9f 4f       	sbci	r25, 0xFF	; 255
 72a:	99 23       	and	r25, r25
 72c:	a9 f0       	breq	.+42     	; 0x758 <__floatsisf+0x40>
 72e:	f9 2f       	mov	r31, r25
 730:	96 e9       	ldi	r25, 0x96	; 150
 732:	bb 27       	eor	r27, r27
 734:	93 95       	inc	r25
 736:	f6 95       	lsr	r31
 738:	87 95       	ror	r24
 73a:	77 95       	ror	r23
 73c:	67 95       	ror	r22
 73e:	b7 95       	ror	r27
 740:	f1 11       	cpse	r31, r1
 742:	f8 cf       	rjmp	.-16     	; 0x734 <__floatsisf+0x1c>
 744:	fa f4       	brpl	.+62     	; 0x784 <__floatsisf+0x6c>
 746:	bb 0f       	add	r27, r27
 748:	11 f4       	brne	.+4      	; 0x74e <__floatsisf+0x36>
 74a:	60 ff       	sbrs	r22, 0
 74c:	1b c0       	rjmp	.+54     	; 0x784 <__floatsisf+0x6c>
 74e:	6f 5f       	subi	r22, 0xFF	; 255
 750:	7f 4f       	sbci	r23, 0xFF	; 255
 752:	8f 4f       	sbci	r24, 0xFF	; 255
 754:	9f 4f       	sbci	r25, 0xFF	; 255
 756:	16 c0       	rjmp	.+44     	; 0x784 <__floatsisf+0x6c>
 758:	88 23       	and	r24, r24
 75a:	11 f0       	breq	.+4      	; 0x760 <__floatsisf+0x48>
 75c:	96 e9       	ldi	r25, 0x96	; 150
 75e:	11 c0       	rjmp	.+34     	; 0x782 <__floatsisf+0x6a>
 760:	77 23       	and	r23, r23
 762:	21 f0       	breq	.+8      	; 0x76c <__floatsisf+0x54>
 764:	9e e8       	ldi	r25, 0x8E	; 142
 766:	87 2f       	mov	r24, r23
 768:	76 2f       	mov	r23, r22
 76a:	05 c0       	rjmp	.+10     	; 0x776 <__floatsisf+0x5e>
 76c:	66 23       	and	r22, r22
 76e:	71 f0       	breq	.+28     	; 0x78c <__floatsisf+0x74>
 770:	96 e8       	ldi	r25, 0x86	; 134
 772:	86 2f       	mov	r24, r22
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	2a f0       	brmi	.+10     	; 0x784 <__floatsisf+0x6c>
 77a:	9a 95       	dec	r25
 77c:	66 0f       	add	r22, r22
 77e:	77 1f       	adc	r23, r23
 780:	88 1f       	adc	r24, r24
 782:	da f7       	brpl	.-10     	; 0x77a <__floatsisf+0x62>
 784:	88 0f       	add	r24, r24
 786:	96 95       	lsr	r25
 788:	87 95       	ror	r24
 78a:	97 f9       	bld	r25, 7
 78c:	08 95       	ret

0000078e <__fp_cmp>:
 78e:	99 0f       	add	r25, r25
 790:	00 08       	sbc	r0, r0
 792:	55 0f       	add	r21, r21
 794:	aa 0b       	sbc	r26, r26
 796:	e0 e8       	ldi	r30, 0x80	; 128
 798:	fe ef       	ldi	r31, 0xFE	; 254
 79a:	16 16       	cp	r1, r22
 79c:	17 06       	cpc	r1, r23
 79e:	e8 07       	cpc	r30, r24
 7a0:	f9 07       	cpc	r31, r25
 7a2:	c0 f0       	brcs	.+48     	; 0x7d4 <__fp_cmp+0x46>
 7a4:	12 16       	cp	r1, r18
 7a6:	13 06       	cpc	r1, r19
 7a8:	e4 07       	cpc	r30, r20
 7aa:	f5 07       	cpc	r31, r21
 7ac:	98 f0       	brcs	.+38     	; 0x7d4 <__fp_cmp+0x46>
 7ae:	62 1b       	sub	r22, r18
 7b0:	73 0b       	sbc	r23, r19
 7b2:	84 0b       	sbc	r24, r20
 7b4:	95 0b       	sbc	r25, r21
 7b6:	39 f4       	brne	.+14     	; 0x7c6 <__fp_cmp+0x38>
 7b8:	0a 26       	eor	r0, r26
 7ba:	61 f0       	breq	.+24     	; 0x7d4 <__fp_cmp+0x46>
 7bc:	23 2b       	or	r18, r19
 7be:	24 2b       	or	r18, r20
 7c0:	25 2b       	or	r18, r21
 7c2:	21 f4       	brne	.+8      	; 0x7cc <__fp_cmp+0x3e>
 7c4:	08 95       	ret
 7c6:	0a 26       	eor	r0, r26
 7c8:	09 f4       	brne	.+2      	; 0x7cc <__fp_cmp+0x3e>
 7ca:	a1 40       	sbci	r26, 0x01	; 1
 7cc:	a6 95       	lsr	r26
 7ce:	8f ef       	ldi	r24, 0xFF	; 255
 7d0:	81 1d       	adc	r24, r1
 7d2:	81 1d       	adc	r24, r1
 7d4:	08 95       	ret

000007d6 <__fp_inf>:
 7d6:	97 f9       	bld	r25, 7
 7d8:	9f 67       	ori	r25, 0x7F	; 127
 7da:	80 e8       	ldi	r24, 0x80	; 128
 7dc:	70 e0       	ldi	r23, 0x00	; 0
 7de:	60 e0       	ldi	r22, 0x00	; 0
 7e0:	08 95       	ret

000007e2 <__fp_nan>:
 7e2:	9f ef       	ldi	r25, 0xFF	; 255
 7e4:	80 ec       	ldi	r24, 0xC0	; 192
 7e6:	08 95       	ret

000007e8 <__fp_pscA>:
 7e8:	00 24       	eor	r0, r0
 7ea:	0a 94       	dec	r0
 7ec:	16 16       	cp	r1, r22
 7ee:	17 06       	cpc	r1, r23
 7f0:	18 06       	cpc	r1, r24
 7f2:	09 06       	cpc	r0, r25
 7f4:	08 95       	ret

000007f6 <__fp_pscB>:
 7f6:	00 24       	eor	r0, r0
 7f8:	0a 94       	dec	r0
 7fa:	12 16       	cp	r1, r18
 7fc:	13 06       	cpc	r1, r19
 7fe:	14 06       	cpc	r1, r20
 800:	05 06       	cpc	r0, r21
 802:	08 95       	ret

00000804 <__fp_round>:
 804:	09 2e       	mov	r0, r25
 806:	03 94       	inc	r0
 808:	00 0c       	add	r0, r0
 80a:	11 f4       	brne	.+4      	; 0x810 <__fp_round+0xc>
 80c:	88 23       	and	r24, r24
 80e:	52 f0       	brmi	.+20     	; 0x824 <__fp_round+0x20>
 810:	bb 0f       	add	r27, r27
 812:	40 f4       	brcc	.+16     	; 0x824 <__fp_round+0x20>
 814:	bf 2b       	or	r27, r31
 816:	11 f4       	brne	.+4      	; 0x81c <__fp_round+0x18>
 818:	60 ff       	sbrs	r22, 0
 81a:	04 c0       	rjmp	.+8      	; 0x824 <__fp_round+0x20>
 81c:	6f 5f       	subi	r22, 0xFF	; 255
 81e:	7f 4f       	sbci	r23, 0xFF	; 255
 820:	8f 4f       	sbci	r24, 0xFF	; 255
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	08 95       	ret

00000826 <__fp_split3>:
 826:	57 fd       	sbrc	r21, 7
 828:	90 58       	subi	r25, 0x80	; 128
 82a:	44 0f       	add	r20, r20
 82c:	55 1f       	adc	r21, r21
 82e:	59 f0       	breq	.+22     	; 0x846 <__fp_splitA+0x10>
 830:	5f 3f       	cpi	r21, 0xFF	; 255
 832:	71 f0       	breq	.+28     	; 0x850 <__fp_splitA+0x1a>
 834:	47 95       	ror	r20

00000836 <__fp_splitA>:
 836:	88 0f       	add	r24, r24
 838:	97 fb       	bst	r25, 7
 83a:	99 1f       	adc	r25, r25
 83c:	61 f0       	breq	.+24     	; 0x856 <__fp_splitA+0x20>
 83e:	9f 3f       	cpi	r25, 0xFF	; 255
 840:	79 f0       	breq	.+30     	; 0x860 <__stack+0x1>
 842:	87 95       	ror	r24
 844:	08 95       	ret
 846:	12 16       	cp	r1, r18
 848:	13 06       	cpc	r1, r19
 84a:	14 06       	cpc	r1, r20
 84c:	55 1f       	adc	r21, r21
 84e:	f2 cf       	rjmp	.-28     	; 0x834 <__fp_split3+0xe>
 850:	46 95       	lsr	r20
 852:	f1 df       	rcall	.-30     	; 0x836 <__fp_splitA>
 854:	08 c0       	rjmp	.+16     	; 0x866 <__stack+0x7>
 856:	16 16       	cp	r1, r22
 858:	17 06       	cpc	r1, r23
 85a:	18 06       	cpc	r1, r24
 85c:	99 1f       	adc	r25, r25
 85e:	f1 cf       	rjmp	.-30     	; 0x842 <__fp_splitA+0xc>
 860:	86 95       	lsr	r24
 862:	71 05       	cpc	r23, r1
 864:	61 05       	cpc	r22, r1
 866:	08 94       	sec
 868:	08 95       	ret

0000086a <__fp_zero>:
 86a:	e8 94       	clt

0000086c <__fp_szero>:
 86c:	bb 27       	eor	r27, r27
 86e:	66 27       	eor	r22, r22
 870:	77 27       	eor	r23, r23
 872:	cb 01       	movw	r24, r22
 874:	97 f9       	bld	r25, 7
 876:	08 95       	ret

00000878 <__gesf2>:
 878:	0e 94 c7 03 	call	0x78e	; 0x78e <__fp_cmp>
 87c:	08 f4       	brcc	.+2      	; 0x880 <__gesf2+0x8>
 87e:	8f ef       	ldi	r24, 0xFF	; 255
 880:	08 95       	ret

00000882 <__mulsf3>:
 882:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__mulsf3x>
 886:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_round>
 88a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__fp_pscA>
 88e:	38 f0       	brcs	.+14     	; 0x89e <__mulsf3+0x1c>
 890:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_pscB>
 894:	20 f0       	brcs	.+8      	; 0x89e <__mulsf3+0x1c>
 896:	95 23       	and	r25, r21
 898:	11 f0       	breq	.+4      	; 0x89e <__mulsf3+0x1c>
 89a:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_inf>
 89e:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__fp_nan>
 8a2:	11 24       	eor	r1, r1
 8a4:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_szero>

000008a8 <__mulsf3x>:
 8a8:	0e 94 13 04 	call	0x826	; 0x826 <__fp_split3>
 8ac:	70 f3       	brcs	.-36     	; 0x88a <__mulsf3+0x8>

000008ae <__mulsf3_pse>:
 8ae:	95 9f       	mul	r25, r21
 8b0:	c1 f3       	breq	.-16     	; 0x8a2 <__mulsf3+0x20>
 8b2:	95 0f       	add	r25, r21
 8b4:	50 e0       	ldi	r21, 0x00	; 0
 8b6:	55 1f       	adc	r21, r21
 8b8:	62 9f       	mul	r22, r18
 8ba:	f0 01       	movw	r30, r0
 8bc:	72 9f       	mul	r23, r18
 8be:	bb 27       	eor	r27, r27
 8c0:	f0 0d       	add	r31, r0
 8c2:	b1 1d       	adc	r27, r1
 8c4:	63 9f       	mul	r22, r19
 8c6:	aa 27       	eor	r26, r26
 8c8:	f0 0d       	add	r31, r0
 8ca:	b1 1d       	adc	r27, r1
 8cc:	aa 1f       	adc	r26, r26
 8ce:	64 9f       	mul	r22, r20
 8d0:	66 27       	eor	r22, r22
 8d2:	b0 0d       	add	r27, r0
 8d4:	a1 1d       	adc	r26, r1
 8d6:	66 1f       	adc	r22, r22
 8d8:	82 9f       	mul	r24, r18
 8da:	22 27       	eor	r18, r18
 8dc:	b0 0d       	add	r27, r0
 8de:	a1 1d       	adc	r26, r1
 8e0:	62 1f       	adc	r22, r18
 8e2:	73 9f       	mul	r23, r19
 8e4:	b0 0d       	add	r27, r0
 8e6:	a1 1d       	adc	r26, r1
 8e8:	62 1f       	adc	r22, r18
 8ea:	83 9f       	mul	r24, r19
 8ec:	a0 0d       	add	r26, r0
 8ee:	61 1d       	adc	r22, r1
 8f0:	22 1f       	adc	r18, r18
 8f2:	74 9f       	mul	r23, r20
 8f4:	33 27       	eor	r19, r19
 8f6:	a0 0d       	add	r26, r0
 8f8:	61 1d       	adc	r22, r1
 8fa:	23 1f       	adc	r18, r19
 8fc:	84 9f       	mul	r24, r20
 8fe:	60 0d       	add	r22, r0
 900:	21 1d       	adc	r18, r1
 902:	82 2f       	mov	r24, r18
 904:	76 2f       	mov	r23, r22
 906:	6a 2f       	mov	r22, r26
 908:	11 24       	eor	r1, r1
 90a:	9f 57       	subi	r25, 0x7F	; 127
 90c:	50 40       	sbci	r21, 0x00	; 0
 90e:	9a f0       	brmi	.+38     	; 0x936 <__mulsf3_pse+0x88>
 910:	f1 f0       	breq	.+60     	; 0x94e <__mulsf3_pse+0xa0>
 912:	88 23       	and	r24, r24
 914:	4a f0       	brmi	.+18     	; 0x928 <__mulsf3_pse+0x7a>
 916:	ee 0f       	add	r30, r30
 918:	ff 1f       	adc	r31, r31
 91a:	bb 1f       	adc	r27, r27
 91c:	66 1f       	adc	r22, r22
 91e:	77 1f       	adc	r23, r23
 920:	88 1f       	adc	r24, r24
 922:	91 50       	subi	r25, 0x01	; 1
 924:	50 40       	sbci	r21, 0x00	; 0
 926:	a9 f7       	brne	.-22     	; 0x912 <__mulsf3_pse+0x64>
 928:	9e 3f       	cpi	r25, 0xFE	; 254
 92a:	51 05       	cpc	r21, r1
 92c:	80 f0       	brcs	.+32     	; 0x94e <__mulsf3_pse+0xa0>
 92e:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_inf>
 932:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_szero>
 936:	5f 3f       	cpi	r21, 0xFF	; 255
 938:	e4 f3       	brlt	.-8      	; 0x932 <__mulsf3_pse+0x84>
 93a:	98 3e       	cpi	r25, 0xE8	; 232
 93c:	d4 f3       	brlt	.-12     	; 0x932 <__mulsf3_pse+0x84>
 93e:	86 95       	lsr	r24
 940:	77 95       	ror	r23
 942:	67 95       	ror	r22
 944:	b7 95       	ror	r27
 946:	f7 95       	ror	r31
 948:	e7 95       	ror	r30
 94a:	9f 5f       	subi	r25, 0xFF	; 255
 94c:	c1 f7       	brne	.-16     	; 0x93e <__mulsf3_pse+0x90>
 94e:	fe 2b       	or	r31, r30
 950:	88 0f       	add	r24, r24
 952:	91 1d       	adc	r25, r1
 954:	96 95       	lsr	r25
 956:	87 95       	ror	r24
 958:	97 f9       	bld	r25, 7
 95a:	08 95       	ret

0000095c <_exit>:
 95c:	f8 94       	cli

0000095e <__stop_program>:
 95e:	ff cf       	rjmp	.-2      	; 0x95e <__stop_program>
